Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

class test {

	public static void main(String[] args) {

		int[] arr = new int[] { 3, 3, 3, 3, 0, 0, 1 };
		int k = 2;
		System.out.println(Arrays.toString(topKFrequent_net(arr, k)));
	}

	public static int[] topKFrequent_net(int[] nums, int k) {
		int[] arr = new int[k];
		HashMap<Integer, Integer> map = new HashMap<>();

		for (int num : nums)
			map.put(num, map.getOrDefault(num, 0) + 1);
		System.out.println(map);

		PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());

		for (Map.Entry<Integer, Integer> it : map.entrySet()) {
			pq.add(it);
			if (pq.size() > k)
				pq.poll();
		}

		int i = k;
		while (!pq.isEmpty()) {
			arr[--i] = pq.poll().getKey();
		}
		return arr;
	}

}