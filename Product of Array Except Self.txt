Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]


package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

class test {

	public static void main(String[] args) {

		int[] arr = new int[] { 1, 2, 3, 4 };
		int k = 6;

		System.out.println(Arrays.toString(productExceptSelf(arr)));
	}

	public static int[] productExceptSelf(int[] nums) {

		int preFix = 1, postFix = 1;
		int[] arr = new int[nums.length];
		for (int i = 0; i < nums.length; i++) {
			arr[i] = preFix;
			preFix *= nums[i];
		}
		System.out.println(Arrays.toString(arr));

		for (int i = nums.length - 1; i >= 1; i--) {

			postFix *= nums[i];
			arr[i - 1] *= postFix;

		}
		return arr;

	}

}