Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.




package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

class test {

	public static void main(String[] args) {

		char[][] arr = new char[][] { { '5', '3', '.', '.', '7', '.', '.', '.', '.' },
				{ '6', '.', '.', '1', '9', '5', '.', '.', '.' }, { '.', '9', '8', '.', '.', '.', '.', '6', '.' },
				{ '8', '.', '.', '.', '6', '.', '.', '.', '3' }, { '4', '.', '.', '8', '.', '3', '.', '.', '1' },
				{ '7', '.', '.', '.', '2', '.', '.', '.', '6' }, { '.', '6', '.', '.', '.', '.', '2', '8', '.' },
				{ '.', '.', '.', '4', '1', '9', '.', '.', '5' }, { '.', '.', '.', '.', '8', '.', '.', '7', '9' } };

		System.out.println(isValidSudoku(arr));
	}

//	nir.length //is the first dimension
//	nir[0].length //is the second dimension
	public static boolean isValidSudoku(char[][] board) {

		boolean row = isValidRow(board);
		boolean column = isValidColumn(board);
		boolean eachCube = isValidCube(board);
		return (row && column && eachCube);

	}

	public static boolean isValidCube(char[][] board) {

		int r = 0;
		int lenR = 0, lenC = 0;
		while (lenC < board[0].length) {
			lenR = 0;
			while (lenR < board.length) {
				HashSet set = new HashSet();
				for (int i = lenR; i < 3 + lenR; i++) {

					for (int j = lenC; j < 3 + lenC; j++)
						if (('.' != board[i][j]) && (set.contains(board[i][j])))
							return false;
						else if ('.' != board[i][j])
							set.add(board[i][j]);

				}
//				System.out.println(set);
				lenR += 3;
			}
			lenC += 3;
		}

		return true;
	}

	public static boolean isValidRow(char[][] board) {

		for (int i = 0; i < board.length; i++) {
			HashSet set = new HashSet();
			for (int j = 0; j < board[0].length; j++)
				if (('.' != board[i][j]) && (set.contains(board[i][j])))
					return false;
				else if ('.' != board[i][j])
					set.add(board[i][j]);

//			System.out.println(set);

		}
		return true;
	}

	public static boolean isValidColumn(char[][] board) {

		for (int i = 0; i < board.length; i++) {
			HashSet set = new HashSet();
			for (int j = 0; j < board[0].length; j++)
				if (('.' != board[j][i]) && (set.contains(board[j][i])))
					return false;
				else if ('.' != board[j][i])
					set.add(board[j][i]);

//			System.out.println(set);

		}
		return true;
	}

}